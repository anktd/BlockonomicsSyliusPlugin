{% extends '@SyliusShop/layout.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .sections-wrapper {
            display: flex;
            flex-direction: row;
            justify-content: space-around;
        }
        @media (max-width: 768px) {
            .sections-wrapper {
                flex-direction: column;
            }
        }
        .copy-section {
            width: 60%;
        }
        @media (max-width: 768px) {
            .copy-section {
                width: 100%;
            }
        }
        .title {
            font-size: 17px;
            font-weight: bold;
            margin-bottom: 6px;
        }
        #open-in-wallet-link {
            text-align: center;
            text-decoration: underline;
            width: 100%;
            justify-content: center;
            display: flex;
            margin-top: 10px;
            margin-bottom: 20px;
        }
        #open-in-wallet-link:hover {
            text-decoration: none;
        }
        .invoice-info-wrapper {
            width: 100%;
            text-transform: uppercase;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
        }
        .invoice-number {
            width: 50%;
            float: left;
            text-align: left;
        }
        .invoice-amount {
            width: 50%;
            float: right;
            text-align: right;
            text-transform: uppercase;
            margin-bottom: 20px;
        }
        .blockonomics-payment-wrapper {
            display: flex;
            justify-content: center;
            width: 100%;
        }
        .initial-state {
            justify-content: center;
            display: flex;
            flex-direction: column;
            width: 100%;
            padding: 24px;
        }
        .input-wrapper {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: row;
            width: 100%;
            margin-bottom: 10px;
        }
        .full-width-input {
            width: 100%;
            padding: 10px;
            text-align: left;
            border: 1px solid #ccc;
            border-radius: 5px;
            color: #444;
            cursor: pointer;
            position: relative;
        }
        .icon {
            cursor: pointer;
            width: 28px;
            margin-left: 5px;
        }
        .icon-refresh::before {
            content: '\27F3';
            cursor: pointer;
            margin-left: 5px;
            width: 28px;
            display: flex;
            font-size: 32px;
            margin-bottom: 5px;
        }
        .btc-value {
            font-size: 14px;
            text-align: center;
        }
        .btc-value-wrapper {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: row;
        }
        @keyframes rotating {
            from {
                transform: rotate(0deg);
            }
            to {
                transform: rotate(360deg);
            }
        }
        .rotating {
            animation: rotating 2s linear infinite;
        }
    </style>
{% endblock %}

{% block content %}
    <div class="alert alert-failure mb-4" hidden id="errors"></div>
    <div class="blockonomics-payment-wrapper">
        <div class="initial-state">
            <div class="invoice-info-wrapper">
                <div class="invoice-number">Order #{{ order_number }}</div>
                <div class="invoice-amount">{{ amount }} {{ currency }}</div>
            </div>
            <div class="sections-wrapper">
                <div class="scan-section">
                    <div class="title">Scan</div>
                    <span class="input-wrapper">
                        <a href="bitcoin:{{ btc_address }}?amount={{ btc_amount }}" id="qr-code-link" target="_blank">
                            <div id="qrcode-container"></div>
                        </a>
                    </span>
                    <a href="bitcoin:{{ btc_address }}?amount={{ btc_amount }}" target="_blank" id="open-in-wallet-link">Open in Wallet</a>
                </div>
                <div class="copy-section">
                    <div class="title">Copy</div>
                    <span>To pay, send bitcoin to this address:</span>
                    <span class="input-wrapper">
                        <input onclick='copyToClipboard("btc-address", this, true)' class="full-width-input" id="btc-address" value="{{ btc_address }}" readonly>
                        <img onclick='copyToClipboard("btc-address", this)' src="{{ asset('assets/copy-icon.svg') }}" class="icon" alt="Copy Icon">
                    </span>
                    <span>Amount of bitcoin (BTC) to send:</span>
                    <span class="input-wrapper">
                        <div class="full-width-input" id="btc-amount" onclick='copyToClipboard("btc-amount", this, true)'>
                            {{ btc_amount }}
                        </div>
                        <img onclick='copyToClipboard("btc-amount", this)' src="{{ asset('assets/copy-icon.svg') }}" class="icon" alt="Copy Icon">
                    </span>
                    <div class="btc-value-wrapper">
                        <div class="btc-value">1 BTC = {{ btc_price }} {{ currency }}, updates in <span id="countdown"></span></div>
                        <span class="icon-refresh" onclick='refreshBTCPrice()'></span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <form action="{{ formAction }}" method="post" id="server-response">
        <input type="hidden" name="_csrf_token" value="{{ csrf_token('payment_after_pay') }}">
        <input type="hidden" name="gateway_response">
        <input type="hidden" name="token">
        <input type="hidden" name="amount" value="{{ amount }}">
        <input type="hidden" name="btc_price" value="{{ btc_price }}">
        <input type="hidden" name="btc_amount" value="{{ btc_amount }}">
        <input type="hidden" name="currency" value="{{ currency }}">
        <input type="hidden" name="txid" value="">
    </form>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <script>
        const startTimer = (seconds) => {
            const countDownDate = new Date().getTime() + seconds * 1000;
            document.getElementById("countdown").innerHTML = "10" + ":" + "00" + " min";

            const updateCountdown = () => {
                const now = new Date().getTime();
                const distance = countDownDate - now;

                const isRefreshing = document.getElementsByClassName("btc-value")[0].innerHTML.includes("Refreshing");
                if (isRefreshing) {
                    return;
                }

                if (distance < 0) {
                    refreshBTCPrice();
                    return;
                }

                const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((distance % (1000 * 60)) / 1000);
                const formattedMinutes = String(minutes).padStart(2, '0');
                const formattedSeconds = String(seconds).padStart(2, '0');
                document.getElementById("countdown").innerHTML = formattedMinutes + ":" + formattedSeconds + " min";
            }

            clearInterval(window.countdownInterval);
            window.countdownInterval = setInterval(updateCountdown, 1000);
        }

        const copyToClipboard = (elementId, passedElement, shouldGrabNextElementSibling) => {
            const element = shouldGrabNextElementSibling ? passedElement.nextElementSibling : passedElement;
            const originalIcon = element.src;

            const tempInput = document.createElement("input");
            const elementWithId = document.getElementById(elementId);
            const { value, innerText } = elementWithId || {};
            const text = value || innerText;
            
            tempInput.value = text;
            document.body.appendChild(tempInput);
            tempInput.select();
            document.execCommand("copy");
            document.body.removeChild(tempInput);

            element.src = "{{ asset('assets/checkmark-icon.svg') }}";

            setTimeout(() => {
                element.src = originalIcon;
            }, 5000);
        }

        const getBTCPrice = async () => {
            try {
                // TODO: Replace with the actual endpoint
                const response = await fetch('/api/blockonomics/price?currency={{ currency }}')

                const price = await response.json();
                return price;
            } catch (error) {
                console.error('There was a problem with the BTC price fetch operation:', error);
            }
        }

        const refreshBTCPrice = async () => {
            const refreshIcon = document.querySelector('.icon-refresh');
            refreshIcon.classList.add('rotating');
            document.getElementsByClassName("btc-value")[0].innerHTML = "Refreshing...";

            try {
                const newPrice = await getBTCPrice();
                if (newPrice) {
                    document.getElementsByClassName("btc-value")[0].innerHTML = "1 BTC = " + (newPrice || "N/A") + " {{ currency }}, updates in <span id='countdown'></span>";
                    const newBtcAmount = (`{{ amount }}` / newPrice).toFixed(10);

                    document.querySelector('input[name="btc_price"]').value = newPrice;
                    document.querySelector('input[name="btc_amount"]').value = newBtcAmount;
                    document.getElementById('btc-amount').textContent = newBtcAmount;
                    
                    const qrCodeLink = document.getElementById('qr-code-link');
                    const openInWalletLink = document.getElementById('open-in-wallet-link');
                    qrCodeLink.href = `bitcoin:{{ btc_address }}?amount=${newBtcAmount}`;
                    openInWalletLink.href = `bitcoin:{{ btc_address }}?amount=${newBtcAmount}`;
                    
                    generateQRCode(newBtcAmount);
                    startTimer(600);
                }
            } catch (error) {
                console.error('Error refreshing BTC price:', error);
            } finally {
                refreshIcon.classList.remove('rotating');
            }
        }

        const connectToWebsocket = () => {
            const webSocketUrl = "wss://www.blockonomics.co/payment/{{ btc_address }}";
            const ws = new WebSocket(webSocketUrl);

            ws.onmessage = function(event) {
                const data = JSON.parse(event.data);
                console.log('Payment status:', data.status);
                const isPaymentUnconfirmed = data.status === 0;
                const isPaymentPartiallyConfirmed = data.status === 1;
                if (isPaymentUnconfirmed || isPaymentPartiallyConfirmed) {
                    document.querySelector('input[name="txid"]').value = data.txid || '';
                    document.getElementById('server-response').submit();
                }
            }
        };

        const generateQRCode = async (newBtcAmount = null) => {
            try {
                const btcAmount = newBtcAmount || '{{ btc_amount }}';
                const qrString = `bitcoin:{{ btc_address }}?amount=${btcAmount}`;
                var qrcodeContainer = document.getElementById("qrcode-container");
                qrcodeContainer.innerHTML = ""; // Clear previous QR code
                new QRCode(qrcodeContainer, {
                    text: qrString,
                    width: 156,
                    height: 156,
                    colorDark: "#000000",
                    colorLight: "#ffffff",
                    correctLevel: QRCode.CorrectLevel.H
                });
            } catch (error) {
                console.error('Error fetching QR code:', error);
                document.getElementById('qrcode-container').textContent = 'Error loading QR code';
            }
        };
        startTimer(600);
        connectToWebsocket();
        generateQRCode();
    </script>
{% endblock %}